import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
pd.set_option('display.max_columns', None)
import numpy as np


class investment_portfolio:

    def __init__(self):         
        clmns = ['Sector','Asset Class', 'Quantity', 'Purchase Price', 'Transaction Value', 'Current Value'] 
        self.portfolio = pd.DataFrame(columns=clmns)
        return
    
    def add_asset(self, ticker, sector, asset_class, quantity, purchase_price): 
        transaction_value = quantity * purchase_price
        current_value = quantity * self.price(ticker, prd='1d').iloc[0, 0]
        self.portfolio.loc[ticker] = {'Sector': sector, 'Asset Class': asset_class, 'Quantity': quantity, 'Purchase Price': purchase_price,
                                      'Transaction Value': transaction_value, 'Current Value': current_value}
        return
    
    def price(self, tickers, prd = '1mo', itv=None):
        # Distinguising between two cases to make compatible for the graph function
        if itv !=None:
            prices = yf.download(tickers, auto_adjust=True, interval = itv, period = prd, progress = False)['Close'][::-1]
            if itv[-1] not in ['m', 'h']:
                prices.index = prices.index.date
        else:
            prices = yf.download(tickers, auto_adjust=True, period = prd, progress = False)['Close'][::-1] 
        return prices
    
    def graph(self, tickers = None, prd = 'max'):
        if tickers == None:
            tickers = self.portfolio.index.tolist()
        prices = self.price(tickers, prd)
        plt.figure()
        # Plot each ticker individually and add label
        if len(tickers) > 1:
            for column in prices.columns:
                plt.plot(prices.index, prices[column], label=column)
        else: 
            plt.plot(prices.index, prices, label=tickers)
        plt.legend()
        plt.show()
        return
    
    def __str__(self): 
        # Creating string instance to easily print the portfolio
        return '\nPortfolio:'+'\n'+str(self.portfolio.round(3)) 
    
    def portfolio_value(self, asset_class = False, sector = False): #added method for portfolio value
        total_value = self.portfolio['Current Value'].sum().round(3)

        print(f'\nThe total portfolio value is: {total_value}\n')
        
        tickers = self.portfolio.index.tolist()
        share_per_asset = pd.DataFrame(columns = ['Share of total value (per asset)'])
        
        for ticker in tickers:
            share_per_asset.loc[ticker] = self.portfolio.loc[ticker]['Current Value']/total_value
        
        print(share_per_asset.round(3))
        
        if asset_class:
            classes = self.portfolio['Asset Class'].unique()
            share_per_asset_class = pd.DataFrame(columns = ['Share of total value (per asset class)'])

            for a_class in classes:
                mask = self.portfolio['Asset Class'] == a_class
                value_a_class = self.portfolio.loc[mask]['Current Value'].sum()
                share_per_asset_class.loc[a_class] = value_a_class/total_value
            
            print('\n'+str(share_per_asset_class.round(3)))
        
        if sector:
            sectors = self.portfolio['Sector'].unique()
            share_per_sector = pd.DataFrame(columns = ['Share of total value (per sector)'])

            for sctr in sectors:
                mask = self.portfolio['Sector'] == sctr
                value_sector = self.portfolio.loc[mask]['Current Value'].sum()
                share_per_sector.loc[sctr] = value_sector/total_value
            
            print('\n'+str(share_per_sector.round(3)))            
                
        return
    
    # Formula to calculate the stock price at a given moment in time
    def S_T(self, T, t, St, simulations, mu, sigma):
        WT_minus_Wt = np.random.normal(0, np.sqrt(T - t), size=simulations)
        return St * np.exp((mu - 0.5 * (sigma**2)) * (T - t) + sigma * WT_minus_Wt)
    
    def portfolio_forecast(self):
        # For the simulation, we assume (for simplicity) that the movement of the stocks are independent.
        # We model the stocks as geometric brownian motions.
        
        sim = 1000
        
        tickers = self.portfolio.index.tolist()
    
        # We assume 251 trading days in a year
        timeline = np.arange(0,251*5,1)

        simulated_values = pd.DataFrame(columns=timeline)


        for ticker in tickers:
            
            # Determine initial price
            St_value = self.price(ticker, prd='1d').iloc[0, 0]
            St = np.full(sim, St_value)

            
            # Create empty array to store the stock values
            stockprice = np.zeros((sim,len(timeline)))
            
            # Determine the initial drift term and standard deviation
            prices = yf.download(ticker, interval = '1d', auto_adjust=True, progress = False)['Close']
            mu = prices.pct_change().dropna().mean()[0]
            sigma = prices.pct_change().dropna().std()[0]
            
            # Loop over days in the next 5 years
            for i in range(1,len(timeline)):
                St = self.S_T(timeline[i],timeline[i-1], St, sim, mu, sigma)
                stockprice[:,i] = St
            
            # Determine quantiles based on stock simulations
            simulated_values.loc[f'{ticker}'+' 95% quantile'] = np.quantile(stockprice, 0.95 ,axis=0)
            simulated_values.loc[f'{ticker}'+' 50% quantile'] = np.quantile(stockprice, 0.50 ,axis=0)
            simulated_values.loc[f'{ticker}'+' 05% quantile'] = np.quantile(stockprice, 0.05 ,axis=0)
            
        return simulated_values  # Made the simulation for stocks seperately, next step is to simulate the entire portfolio
