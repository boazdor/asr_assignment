import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
pd.set_option('display.max_columns', None)

class investment_portfolio:

    def __init__(self): 
        
        """
        Initializes an empty portfolio as a DataFrame with columns:
        Sector, Asset Class, Quantity, Purchase Price, Transaction Value, and Current Value.
        """
        
        clmns = ['Sector','Asset Class', 'Quantity', 'Purchase Price', 'Transaction Value', 'Current Value'] 
        self.portfolio = pd.DataFrame(columns=clmns)
        
        return

    def add_asset(self, ticker, sector, asset_class, quantity, purchase_price): 
        
        """
        Adds a new asset to the portfolio.

        Parameters:
        - ticker: Stock ticker symbol (e.g., 'AAPL')
        - sector: Sector the company belongs to (e.g., 'Tech')
        - asset_class: Type of asset (e.g., 'Equity', 'Bond')
        - quantity: Number of shares/units purchased
        - purchase_price: Price per unit at time of purchase
        """
        
        transaction_value = quantity * purchase_price
        # Obtain current price from yfinance and compute current value
        current_value = quantity * self.price(ticker, prd='1d').iloc[0, 0]
        self.portfolio.loc[ticker] = {
            'Sector': sector, 
            'Asset Class': asset_class, 
            'Quantity': quantity, 
            'Purchase Price': purchase_price,
            'Transaction Value': transaction_value, 
            'Current Value': current_value
            }
        
        return
    
    def price(self, tickers, prd = '1mo', itv=None):
        
        """
        Download historical price data for a ticker or list of tickers using yfinance.

        Parameters:
        - tickers: A ticker string or list of ticker strings (e.g., ['AAPL', 'MSFT'])
        - prd: Time period to fetch (default '1mo', e.g., '5y', '1d')
        - itv: Interval between data points (e.g., '1d', '1wk', '1h')
        """
        
        # Distinguising between two cases to make price method compatible for the graph function;
        # The optimal interval is automatically picked by yfinance when making the graph.
        
        if itv !=None:
            prices = yf.download(tickers, auto_adjust=True, interval = itv, period = prd, progress = False)['Close'][::-1]
            # For longer intervals, simplify the index format
            if itv[-1] not in ['m', 'h']:
                prices.index = prices.index.date
        else:
            prices = yf.download(tickers, auto_adjust=True, period = prd, progress = False)['Close'][::-1]
            
        return prices
    
    def graph(self, tickers = None, prd = 'max'):
        
        """
        Plots the historical price data for specified tickers.

        Parameters:
        - tickers: List of tickers to plot. If None, uses all in portfolio.
        - prd: Time range of the graph (e.g., '1y', '5y', 'max')
        """
        
        if tickers == None:
            tickers = self.portfolio.index.tolist()
        prices = self.price(tickers, prd)
        
        plt.figure()
        
        # Handle both multi and single ticker plotting
        if len(tickers) > 1:
            for column in prices.columns:
                plt.plot(prices.index, prices[column], label=column)
        else: 
            plt.plot(prices.index, prices, label=tickers)
            
        plt.legend()
        plt.title('Historic Stock Prices')
        plt.xlabel('Year')
        plt.ylabel('Stock Price')
        plt.tight_layout() 
        plt.show()
        
        return
    
    def __str__(self): 
        
        """
        Custom string output for printing the portfolio.
        """
        
        return '\nPortfolio:'+'\n'+str(self.portfolio.round(3)) 
    
    def portfolio_value(self, asset_class = False, sector = False):
        
        """
        Prints and plots total portfolio value and share of value per asset, asset class and sector.

        Parameters:
        - asset_class: Set to True to show breakdown by asset class
        - sector: Set to True to show breakdown by sector
        """
        
        total_value = self.portfolio['Current Value'].sum().round(3)
        print(f'\nThe total portfolio value is: {total_value}\n')
        
        tickers = self.portfolio.index.tolist()
        share_per_asset = pd.DataFrame(columns = ['Share of total value (per asset)'])
        
        # Calculate each asset's share of total value
        for ticker in tickers:
            share_per_asset.loc[ticker] = self.portfolio.loc[ticker]['Current Value']/total_value
        
        print(share_per_asset.round(3))
        
        # Pie chart showing asset distribution
        plt.figure(figsize = (6, 6))
        plt.pie(share_per_asset['Share of total value (per asset)'], labels = share_per_asset.index)
        plt.title('Share Of Total Portfolio Value by Asset')
        plt.tight_layout()
        
        # Optional: Breakdown by asset class
        if asset_class:
            classes = self.portfolio['Asset Class'].unique()
            share_per_asset_class = pd.DataFrame(columns = ['Share of total value (per asset class)'])

            for a_class in classes:
                mask = self.portfolio['Asset Class'] == a_class
                value_a_class = self.portfolio.loc[mask]['Current Value'].sum()
                share_per_asset_class.loc[a_class] = value_a_class/total_value
            
            print('\n'+str(share_per_asset_class.round(3)))
            
            plt.figure(figsize = (6, 6))
            plt.pie(share_per_asset_class['Share of total value (per asset class)'], labels = share_per_asset_class.index)
            plt.title('Share Of Total Portfolio Value by Asset Class')
            plt.tight_layout()
        
        # Optional: Breakdown by sector
        if sector:
            sectors = self.portfolio['Sector'].unique()
            share_per_sector = pd.DataFrame(columns = ['Share of total value (per sector)'])

            for sctr in sectors:
                mask = self.portfolio['Sector'] == sctr
                value_sector = self.portfolio.loc[mask]['Current Value'].sum()
                share_per_sector.loc[sctr] = value_sector/total_value
            
            print('\n'+str(share_per_sector.round(3)))            
                
            plt.figure(figsize = (6, 6))
            plt.pie(share_per_sector['Share of total value (per sector)'], labels = share_per_sector.index)
            plt.title('Share Of Total Portfolio Value by Sector')
            plt.tight_layout()
            
        return
    
    # Simulates the stock price at time T, given some initial value St
    def S_T(self, T, t, St, simulations, mu, sigma):
        
        """
        Simulates the future stock price at time T using geometric Brownian motion principals.

        Parameters:
        - T: Future time point
        - t: Current time point
        - St: Current stock price (array of values across simulations)
        - simulations: Number of simulation paths
        - mu: Expected return (drift)
        - sigma: Volatility (standard deviation of returns)
        """
        
        # Random walk increment: W(T) - W(t)
        WT_minus_Wt = np.random.normal(0, np.sqrt(T - t), size=simulations)
        # Geometric Brownian motion formula
        return St * np.exp((mu - 0.5 * (sigma**2)) * (T - t) + sigma * WT_minus_Wt)
    
    def portfolio_forecast(self, graph = True):
        """
        Forecasts the portfolio value over 5 years using Monte Carlo simulation.

        Parameters:
        - graph: If True, plots 5%, 50%, and 95% quantile forecast curves
        """
        
        # For the simulation, we assume (for simplicity) that the movement of the stocks are independent.
        # We model the stock movements as geometric Brownian motions.
        
        sim = 1000 # number of simulations
        tickers = self.portfolio.index.tolist()
        timeline = np.arange(0,251*5,1) # 251 trading days/year over 5 years

        # Initialize DataFrame to store quantiles of portfolio value
        simulated_portfolio = pd.DataFrame(columns=timeline)
        simulated_portfolio.loc['95% quantile'] = 0.0
        simulated_portfolio.loc['50% quantile'] = 0.0
        simulated_portfolio.loc['5% quantile'] = 0.0


        for ticker in tickers:
            # Initial value of the stock
            St_value = self.price(ticker, prd='1d').iloc[0, 0]
            St = np.full(sim, St_value)
            
            stockprice = np.zeros((sim,len(timeline)))
            stockprice[:,0] = St
            
            # Use historical data to estimate expected return (mu) and volatility (sigma)
            prices = yf.download(ticker, interval = '1d', auto_adjust=True, progress = False)['Close']
            mu = prices.pct_change().dropna().mean().iloc[0]
            sigma = prices.pct_change().dropna().std().iloc[0]
            
            # Simulate price over each time step
            for i in range(1,len(timeline)):
                St = self.S_T(timeline[i],timeline[i-1], St, sim, mu, sigma)
                stockprice[:,i] = St
            
            # Multiply quantiles by number of shares to get value, then add to portfolio
            simulated_portfolio.loc['95% quantile'] += np.quantile(stockprice, 0.95 ,axis=0) * self.portfolio.loc[f'{ticker}']['Quantity']
            simulated_portfolio.loc['50% quantile'] += np.quantile(stockprice, 0.50 ,axis=0) * self.portfolio.loc[f'{ticker}']['Quantity']
            simulated_portfolio.loc['5% quantile'] += np.quantile(stockprice, 0.05 ,axis=0) * self.portfolio.loc[f'{ticker}']['Quantity']
        
        # Plot forecast results
        if graph == True:
            timeline_adj = np.arange(0, 5, 1/251) # Converts days back to years
            plt.figure()
            plt.plot(timeline_adj,simulated_portfolio.iloc[0],label='95% quantile')
            plt.plot(timeline_adj,simulated_portfolio.iloc[1],label='50% quantile')
            plt.plot(timeline_adj,simulated_portfolio.iloc[2],label='5% quantile')
            plt.title('5 Year Portfolio Forecast')
            plt.xlabel('Forecast Year')
            plt.ylabel('Portfolio Value')
            plt.legend()
            plt.tight_layout()
            plt.show()
        
        return simulated_portfolio
         
    
#%% Example usage
    
# Create a portfolio instance
my_portfolio = investment_portfolio()

# Add assets (diverse sectors & classes for demo purposes)
my_portfolio.add_asset('AAPL', 'Technology', 'Equity', 10, 150)
my_portfolio.add_asset('MSFT', 'Technology', 'Equity', 5, 280)
my_portfolio.add_asset('JNJ', 'Healthcare', 'Equity', 8, 165)
my_portfolio.add_asset('TLT', 'Government Bonds', 'Bond', 20, 100)
my_portfolio.add_asset('GLD', 'Commodities', 'ETF', 15, 170)

# Print current portfolio overview
print(my_portfolio)

# Show pie charts of value distribution
# Enable both sector and asset class breakdowns
my_portfolio.portfolio_value(sector=True, asset_class=True)

# Forecast the portfolio value over 5 years using Monte Carlo simulations
# Show the 5%, 50%, and 95% quantile bands in a graph
forecast_results = my_portfolio.portfolio_forecast(graph=True)

# Plot 10 year historical prices for two assets in the portfolio
my_portfolio.graph(tickers = ['JNJ', 'GLD'], prd = '10y')

# Plot 5 year historical prices for all assets in the portfolio
my_portfolio.graph(prd = '5y')
